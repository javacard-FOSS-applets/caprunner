// converted by version  [v3.0.1]
// on Wed Apr 20 00:12:55 CEST 2011

.package javatest {
	.aid 0xA0:0x0:0x0:0x0:0x18:0xFF:0x0:0x0:0x0:0x0:0x0:0x0:0x0:0x0:0x1:0x1;
	.version 1.0;

	.imports {
		0xA0:0x0:0x0:0x0:0x62:0x1:0x1 1.4;		//javacard/framework
		0xA0:0x0:0x0:0x0:0x62:0x0:0x1 1.0;		//java/lang
	}

	.applet {
		0xA0:0x0:0x0:0x0:0x18:0xFF:0x0:0x0:0x0:0x0:0x0:0x0:0x0:0x0:0x1:0x2 Test;
	}

	.constantPool {
		// 0
		instanceFieldRef short Test/blah;
		// 1
		staticMethodRef 0.3.0()V;		// javacard/framework/Applet.<init>()V
		// 2
		.classRef Test;
		// 3
		staticMethodRef Test/<init>()V;
		// 4
		virtualMethodRef 0.3.1()V;		// register()V
		// 5
		staticMethodRef 0.7.1(S)V;		// javacard/framework/ISOException.throwIt(S)V
		// 6
		virtualMethodRef Test/accessField(S)S;
		// 7
		staticMethodRef Test/gcdRecursif(SS)S;
	}

	.class public Test 0 extends 0.3 {		// extends javacard/framework/Applet

		.fields {
			 short blah 0;		// S
		}

		.publicMethodTable 7 {
			equals(Ljava/lang/Object;)Z;
			register()V;
			register([BSB)V;
			selectingApplet()Z;
			deselect()V;
			getShareableInterfaceObject(Ljavacard/framework/AID;B)Ljavacard/framework/Shareable;;
			select()Z;
			process(Ljavacard/framework/APDU;)V;
			testfinally(B)B;
			testEasy(B)B;
			testSomeIf(S)S;
			accessField(S)S;
			testLocalVariable()V;
			testCallAnotherFunction()V;
		}

		.packageMethodTable 0 {
		}

		.method public <init>()V 0 {
			.stack 2;
			.locals 0;

				L0:	aload_0;
					invokespecial 1;		// javacard/framework/Applet.<init>()V
					aload_0;
					sconst_0;
					putfield_s 0;		// short javatest/Test.blah
					return;
		}

		.method public static install([BSB)V 1 {
			.stack 2;
			.locals 0;

				L0:	new 2;		// javatest/Test
					dup;
					invokespecial 3;		// javatest/Test.<init>()V
					invokevirtual 4;		// register()V
					return;
		}

		.method public process(Ljavacard/framework/APDU;)V 7 {
			.stack 1;
			.locals 0;

			.descriptor	Ljavacard/framework/APDU;	0.10;

				L0:	sspush 27265;
					invokestatic 5;		// javacard/framework/ISOException.throwIt(S)V
					return;
		}

		.method public testfinally(B)B 8 {
			.stack 2;
			.locals 2;

				L0:	sload_1;
					sconst_5;
					sadd;
					s2b;
					sstore_2;
				L1:	sconst_5;
					sreturn;
				L2:	astore_3;
				L3:	sconst_5;
					sreturn;
			.exceptionTable {
				// start_block end_block handler_block catch_type_index
				L0 L1 L2 0;
				L2 L3 L2 0;
			}
		}

		.method public testEasy(B)B 9 {
			.stack 2;
			.locals 0;

				L0:	sload_1;
					bspush 58;
					sadd;
					s2b;
					sreturn;
		}

		.method public testSomeIf(S)S 10 {
			.stack 2;
			.locals 1;

				L0:	sload_1;
					sconst_2;
					srem;
					ifne L2;
				L1:	sload_1;
					sconst_3;
					smul;
					sreturn;
				L2:	sconst_0;
					sstore_2;
				L3:	sload_2;
					sload_1;
					if_scmpge L5;
				L4:	sload_2;
					sconst_5;
					sadd;
					sstore_1;
					sload_2;
					sconst_1;
					sadd;
					s2b;
					sstore_2;
					goto L3;
				L5:	sload_1;
					sreturn;
		}

		.method public accessField(S)S 11 {
			.stack 3;
			.locals 0;

				L0:	aload_0;
					sload_1;
					getfield_s_this 0;		// short javatest/Test.blah
					sadd;
					putfield_s 0;		// short javatest/Test.blah
					getfield_s_this 0;		// short javatest/Test.blah
					sconst_2;
					smul;
					sreturn;
		}

		.method public testLocalVariable()V 12 {
			.stack 1;
			.locals 2;

				L0:	sconst_5;
					sstore_1;
					bspush 25;
					newarray 12;
					astore_2;
					return;
		}

		.method public testCallAnotherFunction()V 13 {
			.stack 2;
			.locals 0;

				L0:	aload_0;
					getfield_s_this 0;		// short javatest/Test.blah
					invokevirtual 6;		// accessField(S)S
					pop;
					return;
		}

		.method public static gcdIteratif(SS)S 2 {
			.stack 2;
			.locals 1;

				L0:	sload_1;
					ifne L2;
				L1:	sload_0;
					sreturn;
				L2:	sload_0;
					sload_1;
					srem;
					sstore_2;
					sload_1;
					sstore_0;
					sload_2;
					sstore_1;
					goto L0;
		}

		.method public static gcdRecursif(SS)S 3 {
			.stack 3;
			.locals 0;

				L0:	sload_1;
					ifne L2;
				L1:	sload_0;
					sreturn;
				L2:	sload_1;
					sload_0;
					sload_1;
					srem;
					invokestatic 7;		// javatest/Test.gcdRecursif(SS)S
					sreturn;
		}

		.method public static testStatic()V 4 {
			.stack 1;
			.locals 1;

				L0:	sconst_3;
					sstore_0;
					return;
		}

	}

}
